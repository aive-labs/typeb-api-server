name: CI/CD-develop

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  lint_and_formatting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip

      #      - name: Test code (pytest)
      #        run: |
      #          pip install -r requirements.txt
      #          pytest

      - name: Run code formatting(Black)
        run: |
          pip install black
          black --check .

      - name: Run linting (Ruff)
        run: |
          pip install ruff==0.4.8
          ruff check .

  #      - name: Run static type checking (mypy)
  #        run: |
  #          pip install mypy
  #          mypy .

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: lint_and_formatting
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH agent
        run: |
          # GitHub Secrets에 저장된 SSH_PRIVATE_KEY 값을 파일로 저장
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/pem.key
          # 파일 권한 설정
          chmod 600 /tmp/pem.key

      - name: Copy files to Bastion Host
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/pem.key ubuntu@${{ secrets.BASTION_HOST }} 'mkdir -p /home/ubuntu/typeb-api'
          scp -o StrictHostKeyChecking=no -i /tmp/pem.key -r ./* ubuntu@${{ secrets.BASTION_HOST }}:/home/ubuntu/typeb-api

      - name: Copy files from Bastion Host to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/pem.key ubuntu@${{ secrets.BASTION_HOST }} '
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/aice-backend.pem ubuntu@${{ secrets.DEV_API_SERVER }} "find /home/ubuntu/typeb-api -mindepth 1 \( -path '/home/ubuntu/typeb-api/config' -o -path '/home/ubuntu/typeb-api/config/env' \) -prune -o -print | xargs rm -rf"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/aice-backend.pem -r /home/ubuntu/typeb-api/* ubuntu@${{ secrets.DEV_API_SERVER }}:/home/ubuntu/typeb-api
          '

      - name: Clean up Bastion Host
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/pem.key ubuntu@${{ secrets.BASTION_HOST }} 'rm -rf /home/ubuntu/typeb-api'

      - name: Deploy Container on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.BASTION_HOST }}
          username: ubuntu
          script: |
            ssh -i ~/.ssh/aice-backend.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.DEV_API_SERVER }} '
              cd /home/ubuntu/typeb-api && \
              docker build -t aace-app-image . && \
              docker stop aace-container || true && \
              docker rm aace-container || true && \
              docker rmi $(docker images -f "dangling=true" -q) || true && \
              docker run -d --name aace-container \
                -v ./logs:/app/logs \
                -v ./config:/app/config \
                -e AWS_ACCESS_KEY_ID=${{ secrets.DEV_AWS_ACCESS_KEY_ID }} \
                -e AWS_SECRET_ACCESS_KEY=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }} \
                -e AWS_REGION=${{ secrets.DEV_AWS_REGION }} \
                -p 8000:8000 aace-app-image
            '

  deploy-promtail:
    name: deploy_promtail
    runs-on: ubuntu-latest
    needs: build_and_deploy # api 컨테이너 배포된 이후 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH agent
        run: |
          # GitHub Secrets에 저장된 SSH_PRIVATE_KEY 값을 파일로 저장
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/pem.key
          # 파일 권한 설정
          chmod 600 /tmp/pem.key

      - name: Deploy Promtail on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.BASTION_HOST }}
          username: ubuntu
          script: |
            ssh -i ~/.ssh/aice-backend.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.DEV_API_SERVER }} '
              cd /home/ubuntu/typeb-api && \
              docker stop promtail || true && \
              docker rm promtail || true && \
              docker rmi $(docker images -f "dangling=true" -q) || true && \
              docker run -d --name=promtail \
                -v ./promtail:/etc/promtail \
                -v ./logs:/var/log \
                -e LOKI_URL=${{ secrets.DEV_LOKI_URL }} \
                grafana/promtail:3.3.0 \
                -config.file=/etc/promtail/config.yml
              '
